initSidebarItems({"constant":[["COLOR_ALICEBLUE",""],["COLOR_AMBER100",""],["COLOR_AMBER200",""],["COLOR_AMBER300",""],["COLOR_AMBER400",""],["COLOR_AMBER50",""],["COLOR_AMBER500",""],["COLOR_AMBER600",""],["COLOR_AMBER700",""],["COLOR_AMBER800",""],["COLOR_AMBER900",""],["COLOR_AMBERA100",""],["COLOR_AMBERA200",""],["COLOR_AMBERA400",""],["COLOR_AMBERA700",""],["COLOR_ANTIQUEWHITE",""],["COLOR_AQUA",""],["COLOR_AQUAMARINE",""],["COLOR_AZURE",""],["COLOR_BEIGE",""],["COLOR_BISQUE",""],["COLOR_BLACK",""],["COLOR_BLANCHEDALMOND",""],["COLOR_BLUE",""],["COLOR_BLUE100",""],["COLOR_BLUE200",""],["COLOR_BLUE300",""],["COLOR_BLUE400",""],["COLOR_BLUE50",""],["COLOR_BLUE500",""],["COLOR_BLUE600",""],["COLOR_BLUE700",""],["COLOR_BLUE800",""],["COLOR_BLUE900",""],["COLOR_BLUEA100",""],["COLOR_BLUEA200",""],["COLOR_BLUEA400",""],["COLOR_BLUEA700",""],["COLOR_BLUEGREY100",""],["COLOR_BLUEGREY200",""],["COLOR_BLUEGREY300",""],["COLOR_BLUEGREY400",""],["COLOR_BLUEGREY50",""],["COLOR_BLUEGREY500",""],["COLOR_BLUEGREY600",""],["COLOR_BLUEGREY700",""],["COLOR_BLUEGREY800",""],["COLOR_BLUEGREY900",""],["COLOR_BLUEVIOLET",""],["COLOR_BROWN",""],["COLOR_BROWN100",""],["COLOR_BROWN200",""],["COLOR_BROWN300",""],["COLOR_BROWN400",""],["COLOR_BROWN50",""],["COLOR_BROWN500",""],["COLOR_BROWN600",""],["COLOR_BROWN700",""],["COLOR_BROWN800",""],["COLOR_BROWN900",""],["COLOR_BURLYWOOD",""],["COLOR_CADETBLUE",""],["COLOR_CHARTREUSE",""],["COLOR_CHOCOLATE",""],["COLOR_CORAL",""],["COLOR_CORNFLOWER",""],["COLOR_CORNSILK",""],["COLOR_CRIMSON",""],["COLOR_CYAN",""],["COLOR_CYAN100",""],["COLOR_CYAN200",""],["COLOR_CYAN300",""],["COLOR_CYAN400",""],["COLOR_CYAN50",""],["COLOR_CYAN500",""],["COLOR_CYAN600",""],["COLOR_CYAN700",""],["COLOR_CYAN800",""],["COLOR_CYAN900",""],["COLOR_CYANA100",""],["COLOR_CYANA200",""],["COLOR_CYANA400",""],["COLOR_CYANA700",""],["COLOR_DARKBLUE",""],["COLOR_DARKCYAN",""],["COLOR_DARKGOLDENROD",""],["COLOR_DARKGRAY",""],["COLOR_DARKGREEN",""],["COLOR_DARKKHAKI",""],["COLOR_DARKMAGENTA",""],["COLOR_DARKOLIVEGREEN",""],["COLOR_DARKORANGE",""],["COLOR_DARKORCHID",""],["COLOR_DARKRED",""],["COLOR_DARKSALMON",""],["COLOR_DARKSEAGREEN",""],["COLOR_DARKSLATEBLUE",""],["COLOR_DARKSLATEGRAY",""],["COLOR_DARKTURQUOISE",""],["COLOR_DARKVIOLET",""],["COLOR_DEEPORANGE100",""],["COLOR_DEEPORANGE200",""],["COLOR_DEEPORANGE300",""],["COLOR_DEEPORANGE400",""],["COLOR_DEEPORANGE50",""],["COLOR_DEEPORANGE500",""],["COLOR_DEEPORANGE600",""],["COLOR_DEEPORANGE700",""],["COLOR_DEEPORANGE800",""],["COLOR_DEEPORANGE900",""],["COLOR_DEEPORANGEA100",""],["COLOR_DEEPORANGEA200",""],["COLOR_DEEPORANGEA400",""],["COLOR_DEEPORANGEA700",""],["COLOR_DEEPPINK",""],["COLOR_DEEPPURPLE100",""],["COLOR_DEEPPURPLE200",""],["COLOR_DEEPPURPLE300",""],["COLOR_DEEPPURPLE400",""],["COLOR_DEEPPURPLE50",""],["COLOR_DEEPPURPLE500",""],["COLOR_DEEPPURPLE600",""],["COLOR_DEEPPURPLE700",""],["COLOR_DEEPPURPLE800",""],["COLOR_DEEPPURPLE900",""],["COLOR_DEEPPURPLEA100",""],["COLOR_DEEPPURPLEA200",""],["COLOR_DEEPPURPLEA400",""],["COLOR_DEEPPURPLEA700",""],["COLOR_DEEPSKYBLUE",""],["COLOR_DIMGRAY",""],["COLOR_DODGERBLUE",""],["COLOR_FIREBRICK",""],["COLOR_FLORALWHITE",""],["COLOR_FORESTGREEN",""],["COLOR_FUCHSIA",""],["COLOR_GAINSBORO",""],["COLOR_GHOSTWHITE",""],["COLOR_GOLD",""],["COLOR_GOLDENROD",""],["COLOR_GRAY",""],["COLOR_GREEN",""],["COLOR_GREEN100",""],["COLOR_GREEN200",""],["COLOR_GREEN300",""],["COLOR_GREEN400",""],["COLOR_GREEN50",""],["COLOR_GREEN500",""],["COLOR_GREEN600",""],["COLOR_GREEN700",""],["COLOR_GREEN800",""],["COLOR_GREEN900",""],["COLOR_GREENA100",""],["COLOR_GREENA200",""],["COLOR_GREENA400",""],["COLOR_GREENA700",""],["COLOR_GREENYELLOW",""],["COLOR_GREY100",""],["COLOR_GREY200",""],["COLOR_GREY300",""],["COLOR_GREY400",""],["COLOR_GREY50",""],["COLOR_GREY500",""],["COLOR_GREY600",""],["COLOR_GREY700",""],["COLOR_GREY800",""],["COLOR_GREY850",""],["COLOR_GREY900",""],["COLOR_HONEYDEW",""],["COLOR_HOTPINK",""],["COLOR_INDIANRED",""],["COLOR_INDIGO",""],["COLOR_INDIGO100",""],["COLOR_INDIGO200",""],["COLOR_INDIGO300",""],["COLOR_INDIGO400",""],["COLOR_INDIGO50",""],["COLOR_INDIGO500",""],["COLOR_INDIGO600",""],["COLOR_INDIGO700",""],["COLOR_INDIGO800",""],["COLOR_INDIGO900",""],["COLOR_INDIGOA100",""],["COLOR_INDIGOA200",""],["COLOR_INDIGOA400",""],["COLOR_INDIGOA700",""],["COLOR_IVORY",""],["COLOR_KHAKI",""],["COLOR_LAVENDER",""],["COLOR_LAVENDERBLUSH",""],["COLOR_LAWNGREEN",""],["COLOR_LEMONCHIFFON",""],["COLOR_LIGHTBLUE",""],["COLOR_LIGHTBLUE100",""],["COLOR_LIGHTBLUE200",""],["COLOR_LIGHTBLUE300",""],["COLOR_LIGHTBLUE400",""],["COLOR_LIGHTBLUE50",""],["COLOR_LIGHTBLUE500",""],["COLOR_LIGHTBLUE600",""],["COLOR_LIGHTBLUE700",""],["COLOR_LIGHTBLUE800",""],["COLOR_LIGHTBLUE900",""],["COLOR_LIGHTBLUEA100",""],["COLOR_LIGHTBLUEA200",""],["COLOR_LIGHTBLUEA400",""],["COLOR_LIGHTBLUEA700",""],["COLOR_LIGHTCORAL",""],["COLOR_LIGHTCYAN",""],["COLOR_LIGHTGOLDENROD",""],["COLOR_LIGHTGRAY",""],["COLOR_LIGHTGREEN",""],["COLOR_LIGHTGREEN100",""],["COLOR_LIGHTGREEN200",""],["COLOR_LIGHTGREEN300",""],["COLOR_LIGHTGREEN400",""],["COLOR_LIGHTGREEN50",""],["COLOR_LIGHTGREEN500",""],["COLOR_LIGHTGREEN600",""],["COLOR_LIGHTGREEN700",""],["COLOR_LIGHTGREEN800",""],["COLOR_LIGHTGREEN900",""],["COLOR_LIGHTGREENA100",""],["COLOR_LIGHTGREENA200",""],["COLOR_LIGHTGREENA400",""],["COLOR_LIGHTGREENA700",""],["COLOR_LIGHTPINK",""],["COLOR_LIGHTSALMON",""],["COLOR_LIGHTSEAGREEN",""],["COLOR_LIGHTSKYBLUE",""],["COLOR_LIGHTSLATEGRAY",""],["COLOR_LIGHTSTEELBLUE",""],["COLOR_LIGHTYELLOW",""],["COLOR_LIME",""],["COLOR_LIME100",""],["COLOR_LIME200",""],["COLOR_LIME300",""],["COLOR_LIME400",""],["COLOR_LIME50",""],["COLOR_LIME500",""],["COLOR_LIME600",""],["COLOR_LIME700",""],["COLOR_LIME800",""],["COLOR_LIME900",""],["COLOR_LIMEA100",""],["COLOR_LIMEA200",""],["COLOR_LIMEA400",""],["COLOR_LIMEA700",""],["COLOR_LIMEGREEN",""],["COLOR_LINEN",""],["COLOR_MAGENTA",""],["COLOR_MAROON",""],["COLOR_MEDIUMAQUAMARINE",""],["COLOR_MEDIUMBLUE",""],["COLOR_MEDIUMORCHID",""],["COLOR_MEDIUMPURPLE",""],["COLOR_MEDIUMSEAGREEN",""],["COLOR_MEDIUMSLATEBLUE",""],["COLOR_MEDIUMSPRINGGREEN",""],["COLOR_MEDIUMTURQUOISE",""],["COLOR_MEDIUMVIOLETRED",""],["COLOR_MIDNIGHTBLUE",""],["COLOR_MINTCREAM",""],["COLOR_MISTYROSE",""],["COLOR_MOCCASIN",""],["COLOR_NAVAJOWHITE",""],["COLOR_NAVYBLUE",""],["COLOR_OLDLACE",""],["COLOR_OLIVE",""],["COLOR_OLIVEDRAB",""],["COLOR_ORANGE",""],["COLOR_ORANGE100",""],["COLOR_ORANGE200",""],["COLOR_ORANGE300",""],["COLOR_ORANGE400",""],["COLOR_ORANGE50",""],["COLOR_ORANGE500",""],["COLOR_ORANGE600",""],["COLOR_ORANGE700",""],["COLOR_ORANGE800",""],["COLOR_ORANGE900",""],["COLOR_ORANGEA100",""],["COLOR_ORANGEA200",""],["COLOR_ORANGEA400",""],["COLOR_ORANGEA700",""],["COLOR_ORANGERED",""],["COLOR_ORCHID",""],["COLOR_PALEGOLDENROD",""],["COLOR_PALEGREEN",""],["COLOR_PALETURQUOISE",""],["COLOR_PALEVIOLETRED",""],["COLOR_PAPAYAWHIP",""],["COLOR_PEACHPUFF",""],["COLOR_PERU",""],["COLOR_PINK",""],["COLOR_PINK100",""],["COLOR_PINK200",""],["COLOR_PINK300",""],["COLOR_PINK400",""],["COLOR_PINK50",""],["COLOR_PINK500",""],["COLOR_PINK600",""],["COLOR_PINK700",""],["COLOR_PINK800",""],["COLOR_PINK900",""],["COLOR_PINKA100",""],["COLOR_PINKA200",""],["COLOR_PINKA400",""],["COLOR_PINKA700",""],["COLOR_PLUM",""],["COLOR_POWDERBLUE",""],["COLOR_PURPLE",""],["COLOR_PURPLE100",""],["COLOR_PURPLE200",""],["COLOR_PURPLE300",""],["COLOR_PURPLE400",""],["COLOR_PURPLE50",""],["COLOR_PURPLE500",""],["COLOR_PURPLE600",""],["COLOR_PURPLE700",""],["COLOR_PURPLE800",""],["COLOR_PURPLE900",""],["COLOR_PURPLEA100",""],["COLOR_PURPLEA200",""],["COLOR_PURPLEA400",""],["COLOR_PURPLEA700",""],["COLOR_REBECCAPURPLE",""],["COLOR_RED",""],["COLOR_RED100",""],["COLOR_RED200",""],["COLOR_RED300",""],["COLOR_RED400",""],["COLOR_RED50",""],["COLOR_RED500",""],["COLOR_RED600",""],["COLOR_RED700",""],["COLOR_RED800",""],["COLOR_RED900",""],["COLOR_REDA100",""],["COLOR_REDA200",""],["COLOR_REDA400",""],["COLOR_REDA700",""],["COLOR_ROSYBROWN",""],["COLOR_ROYALBLUE",""],["COLOR_SADDLEBROWN",""],["COLOR_SALMON",""],["COLOR_SANDYBROWN",""],["COLOR_SEAGREEN",""],["COLOR_SEASHELL",""],["COLOR_SIENNA",""],["COLOR_SILVER",""],["COLOR_SKYBLUE",""],["COLOR_SLATEBLUE",""],["COLOR_SLATEGRAY",""],["COLOR_SNOW",""],["COLOR_SPRINGGREEN",""],["COLOR_STEELBLUE",""],["COLOR_TAN",""],["COLOR_TEAL",""],["COLOR_TEAL100",""],["COLOR_TEAL200",""],["COLOR_TEAL300",""],["COLOR_TEAL400",""],["COLOR_TEAL50",""],["COLOR_TEAL500",""],["COLOR_TEAL600",""],["COLOR_TEAL700",""],["COLOR_TEAL800",""],["COLOR_TEAL900",""],["COLOR_TEALA100",""],["COLOR_TEALA200",""],["COLOR_TEALA400",""],["COLOR_TEALA700",""],["COLOR_THISTLE",""],["COLOR_TOMATO",""],["COLOR_TURQUOISE",""],["COLOR_VIOLET",""],["COLOR_WEBGRAY",""],["COLOR_WEBGREEN",""],["COLOR_WEBMAROON",""],["COLOR_WEBPURPLE",""],["COLOR_WHEAT",""],["COLOR_WHITE",""],["COLOR_WHITESMOKE",""],["COLOR_YELLOW",""],["COLOR_YELLOW100",""],["COLOR_YELLOW200",""],["COLOR_YELLOW300",""],["COLOR_YELLOW400",""],["COLOR_YELLOW50",""],["COLOR_YELLOW500",""],["COLOR_YELLOW600",""],["COLOR_YELLOW700",""],["COLOR_YELLOW800",""],["COLOR_YELLOW900",""],["COLOR_YELLOWA100",""],["COLOR_YELLOWA200",""],["COLOR_YELLOWA400",""],["COLOR_YELLOWA700",""],["COLOR_YELLOWGREEN",""],["DRAWCUBE_SHADER_PRELUDE","Common [`Shader`] code for using [`CubeIns`]."],["TEXT_ANCHOR_BOTTOM",""],["TEXT_ANCHOR_CENTER_H",""],["TEXT_ANCHOR_CENTER_V",""],["TEXT_ANCHOR_LEFT",""],["TEXT_ANCHOR_RIGHT",""],["TEXT_ANCHOR_TOP",""],["TEXT_STYLE_MONO","A monospace [`TextStyle`]."],["TEXT_STYLE_NORMAL","The default [`TextStyle`]."]],"enum":[["AnimValue","Represents an actual value in an [`Animator`], which can be of a few different types, but should remain consistent in its type (for a given [`Track`]) for the lifetime of an [`Animator`]."],["Area","An [`Area`] can be thought of as a “pointer” into the draw tree. You typically get one as the result of a draw command, like [`Cx::add_instances`], or [`View::end_view`]."],["ClearColor","The color to either initialize a [`Texture`] with (when rendering it for the very first time), or to clear it with on every paint."],["ClearDepth","The depth to either initialize a [`Texture`] with (when rendering it for the very first time), or to clear it with on every paint."],["CodeFragment","Represents a location in a file, and the code string itself. Generate easily using the `zaplib::code_fragment!()` macro."],["CxBoxType",""],["CxDebugDrawTree","What kind of debug information should be printed about the draw tree."],["Direction","The direction in which the [`CxLayoutBox`] should walk. It will typically walk in a straight line in this direction. E.g. when walking to [`Direction::Right`], it will only walk horizontally, not vertically, until it hits the [`CxLayoutBox::width`], at which point it will wrap around using [`LineWrap`], based on the maximum height of widgets that have been drawn so far, which is registered in [`CxLayoutBox::biggest`]."],["Ease","Describes how output values of a [`Track`] get mapped for fractions in between keyframes. See these pages for more explanations:"],["Event","Global event passed into an application’s `handle` function. See contained structs for more details."],["Height","Different ways in which a [`LayoutSize`] can get a height."],["HoverState","The type of [`PointerHoverEvent`]."],["KeyCode","Lowest common denominator keymap between desktop and web."],["LineWrap","Indicates when to wrap the current line to a new line. See also [`Direction`]."],["Menu","Represents a single menu, as well as all menus (recursively)."],["MouseButton","The type of input that was used to trigger a pointer event."],["MouseCursor","The type of mouse cursor to show. Enjoy the ASCII art here."],["PassMatrixMode","Standard types of projection matrices."],["PlatformType","Contains information about the platform (operating system) that we’re running on."],["PointerInputType","The type of input that was used to trigger a pointer event."],["SystemEvent","See [`Event::SystemEvent`]."],["Track","Represents a single value that changes during the course of an animation. Should remain consistent in its type and what it represents between the different animations that you pass into a single [`Animator`]."],["Ty","Variable type in shader code."],["Width","Different ways in which a [`LayoutSize`] can get a width."],["WindowDragQueryResponse","Response to operating system inquiry if a [`Window`] can be dragged."],["Wrapping","Determines when to emit a set of glyphs, which has roughly the effect of wrapping at these boundaries."],["ZapParam",""]],"fn":[["get_font_atlas_page_id","Get the page id for a particular font_id/dpi_factor/font_size combination."],["vec2","Convenience function for making a [`Vec2`]."],["vec3","Convenience function for making a [`Vec3`]."],["vec4","Convenience function for making a [`Vec4`]."]],"macro":[["code_fragment","Tag a piece of code with filename+line+col. The line+col are done in a hacky way, exploiting the fact that rustfmt usually puts the multiline string start on a newline, with one greater indentation level. This doesn’t always work but it’s close enough!"],["code_fragment","Tag a piece of code with filename+line+col. The line+col are done in a hacky way, exploiting the fact that rustfmt usually puts the multiline string start on a newline, with one greater indentation level. This doesn’t always work but it’s close enough!"],["location_hash","Generates a [`crate::hash::LocationHash`] based on the current file/line/column."],["location_hash","Generates a [`crate::hash::LocationHash`] based on the current file/line/column."],["log","Logging helper that works both on native and WebAssembly targets."],["log","Logging helper that works both on native and WebAssembly targets."],["main_app","Define the entry point of your application."],["main_app","Define the entry point of your application."],["register_call_rust","Define state-less entry point"],["register_call_rust","Define state-less entry point"]],"mod":[["byte_extract","Read the desired data type in as few instructions as possible. This is technically unsafe if you’re reading past the end of a buffer, but we’re not going to worry about that for performance. This saves a relatively expensive boundary check when using safe functions like `from_le_bytes` with `try_into().unwrap()`."],["debug_log",""],["universal_file",""],["universal_http_stream",""],["universal_rand","Version of [`rand`] that also works in WebAssembly."],["universal_thread","Version of [`std::thread`] that also works in WebAssembly."]],"static":[["TEXT_INS_SHADER",""]],"struct":[["Anim","An actual animation that can be played."],["Animator","Manages animations. Assumes that you always pass it with [`Anim`] objects with the same types of [`Track`]s. For example, if track 0 represents represents a color Vec4, and track 1 represents a Float value, then make sure to use that consistently throughout the lifetime of an Animator."],["AppOpenFilesEvent","See [`Event::AppOpenFiles`]."],["ComponentId","Identifier that represents a particular “component” on the screen, even if it gets moved around or disappears temporarily."],["CubeIns","Draw a cube; similar to [`crate::QuadIns`]. Is currently not used much, so mostly for demonstration purposes."],["Cx","The main “context” object which contains pretty much everything we need within the framework."],["CxAfterDraw","Some font-related stuff gets drawn at the end of each draw cycle."],["CxDebugFlags","Flags that can be set that enable debug functionality. See [`Cx::debug_flags_mut`] for an example."],["CxFontsData","A context object containing everything font releated. This is used in different places to render text and also"],["CxView","An actual instantiation of a [`View`]. It’s a node in the draw tree with children, which can be either [`DrawCall`]s or other [`View`]s."],["Debugger",""],["DrawCall","This represents an actual call to the GPU, or it can represent a sub-[`View`], in case [`DrawCall::sub_view_id`] is set. Note that all of this behaves completely differently if [`DrawCall::sub_view_id`] is set; all regular drawing fields are ignored in that case!"],["DrawGlyphsProps",""],["FileDragUpdateEvent","See [`Event::FileDragUpdate`]."],["Font","A pointer to a [`CxFont`] (indexed in [`CxFontsData::fonts`] using [`Font::font_id`]),"],["Geometry","Generated geometry data used for instanced rendering, represented as triangles."],["GpuGeometry","A pointer to a [`CxGpuGeometry`] (indexed in [`Cx::gpu_geometries`] using [`GpuGeometry::gpu_geometry_id`]),"],["ImageIns","For drawing a [`Texture`]."],["InstanceRangeArea","Pointer to a part of a [`DrawCall`], e.g. from [`Cx::add_instances`]. This pointer points to a range of instances, where the first index is indicated by [`InstanceRangeArea::instance_offset`], and the size of the range by [`InstanceRangeArea::instance_count`]."],["KeyEvent","Data for various kinds of key-based events ([`Event::KeyDown`], [`Event::KeyUp`], etc)."],["KeyFocusEvent","See [`Event::KeyFocus`] and [`Event::KeyFocusLost`]."],["KeyModifiers","Modifiers that were held when a key event was fired."],["LayoutSize","Determines how a [`CxLayoutBox`] should walk. Can be applied to a new [`CxLayoutBox`] through [`Layout::layout_size`], or directly to move an existing [`CxLayoutBox`] by using [`Cx::add_box`]."],["LocationHash","Represents a particular place in the code. Useful e.g. for shaders; see the documentation of [`crate::Shader`]."],["Mat4","4x4 matrix; very common in graphics programming."],["Padding","Inner padding dimensions that should be applied on top of a [`Rect`] or other object that defines dimensions."],["Pass","A rendering context e.g. for doing 3d rendering."],["PointerDownEvent","See [`Event::PointerDown`]."],["PointerHoverEvent","See [`Event::PointerHover`]."],["PointerMoveEvent","See [`Event::PointerMove`]."],["PointerScrollEvent","See [`Event::PointerScroll`]."],["PointerUpEvent","See [`Event::PointerUp`]."],["QuadIns","[`QuadIns`] is the basis for most draw structs.This renders a rectangle. There are some default shaders available at [`QuadIns::SHADER`]."],["Quat","Quaternion; used for rotations."],["Rect","Represents an (axis-aligned) rectangle. Axis-aligned means that you can’t rotate it."],["Shader","Contains all information necessary to build a shader. Define a new shader."],["Signal","For firing and capturing custom events. Can even be fired from different threads using [`Cx::post_signal`]."],["SignalEvent","See [`Event::Signal`]. TODO(JP): Is this a bit too complicated of an API? What about if we just send `pub signal: u64`, or even a `Box`? Then you can use it for anything."],["TextInputEvent","See [`Event::TextInput`]."],["TextIns",""],["TextInsProps","Some props for how to render the text."],["TextStyle","Style for how to render text. TODO(hernan): Should we include color and font scaling as part of the text style?"],["Texture","A persistent reference to a GPU texture."],["TextureHandle","A pointer to a [`CxTexture`] (indexed in [`Cx::textures`] using [`TextureHandle::texture_id`]),"],["Timer","Created using [`Cx::start_timer`]."],["TimerEvent","See [`Event::Timer`]."],["Transform","A common type of transformation, that includes a rotation ([`Transform::orientation`]) and translation ([`Transform::position`])."],["UniversalInstant","Version of [`std::time::Instant`] that also works in WebAssembly."],["UserFile","A file that was supplied by a user, as opposed to by the application itself (like font resources and such)."],["Vec2","Vector (as in linear algebra, not as in [`Vec`]!) with two elements."],["Vec3","Vector (as in linear algebra, not as in [`Vec`]!) with three elements."],["Vec4","Vector (as in linear algebra, not as in [`Vec`]!) with four elements."],["View","A group of [`DrawCall`]s."],["ViewArea","Pointer to a particular view in the draw tree, using a [`ViewArea::view_id`]. Note that a [`View::view_id`] only gets set when it gets drawn."],["ViewUniforms","Uniforms that can be set on the [`View`] that wraps a [`DrawCall`]."],["WebRustCallEvent","Fires when a web worker calls `callRust` to trigger a function in Rust."],["WebSocketMessageEvent","See [`Event::WebSocketMessage`]."],["Window","A pointer to a [`CxWindow`] (indexed in [`Cx::windows`] using [`Window::window_id`]),"],["WindowCloseRequestedEvent","See [`Event::WindowCloseRequested`]."],["WindowClosedEvent","See [`Event::WindowClosed`]."],["WindowDragQueryEvent","See [`Event::WindowDragQuery`]. To respond, set `response` field to a variant of [`WindowDragQueryResponse`]."],["WindowGeom","Information on the geometry and capabilities of a particular native window."],["WindowGeomChangeEvent","See [`Event::WindowGeomChange`]."],["WindowResizeLoopEvent","See [`Event::WindowResizeLoop`]."]],"trait":[["CxDesktopVsWasmCommon","A bunch of traits that are common between the native platforms and the WebAssembly platform. This trait makes sure that there is consistency in the interface, and provides one place for documentation."],["CxPlatformCommon","A bunch of traits that are common between the different target platforms. This trait makes sure that there is consistency in the interface, and provides one place for documentation."],["Instant","Version of [`std::time::Instant`] that also works in WebAssembly."],["IntoParam",""],["ReadSeek","A trait for the combination of reading and seeking."]],"type":[["CommandId","An alias over LocationHash so we have a semantic type but can change the underlying implementation whenever. See [`Event::Command`]."],["ReadSeekBufReader","Convenient alias for a [`BufReader`] that contains a dynamic dispatch pointer to a [`ReadSeek`]."],["StatusId","Status field to send with a [`Signal`]."]]});