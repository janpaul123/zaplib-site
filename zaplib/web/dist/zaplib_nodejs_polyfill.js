!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.zaplib=t():e.zaplib=t()}(global,(function(){return(()=>{var e={202:(e,t,r)=>{const o=r(310),n=r(144),s=r(267),a=Symbol.for("worker"),i=Symbol.for("events");class c{constructor(){Object.defineProperty(this,i,{value:new Map})}dispatchEvent(e){if(e.target=e.currentTarget=this,this["on"+e.type])try{this["on"+e.type](e)}catch(e){console.error(e)}const t=this[i].get(e.type);null!=t&&t.forEach((t=>{try{t.call(this,e)}catch(e){console.error(e)}}))}addEventListener(e,t){let r=this[i].get(e);r||this[i].set(e,r=[]),r.push(t)}removeEventListener(e,t){let r=this[i].get(e);if(r){const e=r.indexOf(t);-1!==e&&r.splice(e,1)}}}function l(e,t){this.type=e,this.timeStamp=Date.now(),this.target=this.currentTarget=this.data=null}e.exports=s.isMainThread?function(){class e extends c{constructor(e,t){super();const{name:r,type:n}=t||{};let i;i=/^data:/.test(e+="")?e:o.fileURLToPath(new o.URL(e,p));const c=new s.Worker(__filename,{workerData:{mod:i,name:r,type:n}});Object.defineProperty(this,a,{value:c}),c.on("message",(e=>{const t=new l("message");t.data=e,this.dispatchEvent(t)})),c.on("error",(e=>{e.type="error",this.dispatchEvent(e)})),c.on("exit",(()=>{this.dispatchEvent(new l("close"))}))}postMessage(e,t){this[a].postMessage(e,t)}terminate(){this[a].terminate()}}return e.prototype.onmessage=e.prototype.onerror=e.prototype.onclose=null,e}():function(){let{mod:e,name:t,type:o}=s.workerData;const n=global.self=global;let a=[];function i(){const e=a;a=null,e.forEach((e=>{n.dispatchEvent(e)}))}s.parentPort.on("message",(e=>{const t=new l("message");t.data=e,null==a?n.dispatchEvent(t):a.push(t)})),s.parentPort.on("error",(e=>{e.type="Error",n.dispatchEvent(e)}));class p extends c{postMessage(e,t){s.parentPort.postMessage(e,t)}close(){process.exit()}}let u=Object.getPrototypeOf(global);delete u.constructor,Object.defineProperties(p.prototype,u),u=Object.setPrototypeOf(global,new p),["postMessage","addEventListener","removeEventListener","dispatchEvent"].forEach((e=>{u[e]=u[e].bind(global)})),global.name=t;const f=/^data:/.test(e);if("module"===o)r(248)(e).catch((r=>{if(f&&"Not supported"===r.message)return console.warn("Worker(): Importing data: URLs requires Node 12.10+. Falling back to classic worker."),d(e,t);console.error(r)})).then(i);else{try{/^data:/.test(e)?d(e,t):r(767)(e)}catch(e){console.error(e)}Promise.resolve().then(i)}}();const p=o.pathToFileURL(process.cwd()+"/");function d(e,t){const{data:r}=function(e){let[t,r,o,n]=e.match(/^data: *([^;,]*)(?: *; *([^,]*))? *,(.*)$/)||[];if(!t)throw Error("Invalid Data URL.");if(n=decodeURIComponent(n),o){if("base64"!==o.toLowerCase())throw Error('Unknown Data URL encoding "'+o+'"');n=Buffer.from(n,"base64").toString()}return{type:r,data:n}}(e);return n.runInThisContext(r,{filename:"worker.<"+(t||"data:")+">"})}},248:e=>{function t(e){return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}t.keys=()=>[],t.resolve=t,t.id=248,e.exports=t},767:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=767,e.exports=t},310:e=>{"use strict";e.exports=require("url")},144:e=>{"use strict";e.exports=require("vm")},267:e=>{"use strict";e.exports=require("worker_threads")}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var s=t[o]={exports:{}};return e[o](s,s.exports,r),s.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{"use strict";r.r(o);var e=r(202),t=r.n(e);self.Worker=t()})(),o})()}));
//# sourceMappingURL=zaplib_nodejs_polyfill.js.map